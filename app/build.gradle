buildscript {
    dependencies {
        classpath gradlePlugins.buildProperties
        classpath gradlePlugins.fabric
        classpath gradlePlugins.kotlin
    }
}

plugins {
    id "me.tatarka.retrolambda" version "3.5.0"
    id "io.gitlab.arturbosch.detekt" version "1.0.0.M10.2"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.github.triplet.play'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

buildProperties {
    application {
        file project.file('../team-props/application.properties')
    }
    secrets {
        file project.file('../team-props/secrets.properties')
    }
    releaseSigningConfig {
        file project.file('../team-props/releaseSigningConfig.properties')
    }
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId((buildProperties.application['applicationId'] | buildProperties.env['APPLICATION_ID']).string)

        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        multiDexEnabled true

        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        manifestPlaceholders += [
                fabricApiKey: (buildProperties.secrets['fabricApiKey'] | buildProperties.env['FABRIC_API_KEY']).string
        ]

        resValueProperty 'app_name', (buildProperties.application['applicationName'] | "Squanchy")

        resValueProperty 'api_value_twitter_api_key', (buildProperties.secrets['twitterApiKey'] | buildProperties.env['TWITTER_API_KEY'])
        resValueProperty 'api_value_twitter_secret', (buildProperties.secrets['twitterSecret'] | buildProperties.env['TWITTER_SECRET'])
        resValueProperty 'nearit_api_key', (buildProperties.secrets['nearITApiKey'] | buildProperties.env['NEARIT_API_KEY'])

        resValueProperty 'social_query', (buildProperties.application['socialQuery'] | "#AndroidDev")
        resValueProperty 'deeplink_scheme', (buildProperties.application['deeplinkScheme'] | "squanchy")
    }

    if (System.getenv('CI') == null) {
        signingConfigs {
            config {
                signingConfigProperties buildProperties.releaseSigningConfig
            }
        }

        buildTypes {
            debug {
                minifyEnabled false
            }
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }
    }

    lintOptions {
        lintConfig file("$rootProject.projectDir/team-props/lint.xml")
        abortOnError false
    }
}

play {
    jsonFile = file('../team-props/play-store-keys.json')
}

detekt {
    input = "./src/main/java"
    config = "../team-props/detekt.yml"
    filters = ".*test.*, .*/resources/.*"
}

project.afterEvaluate {
    check.dependsOn tasks['detekt']
}

dependencies {
    compile libraries.app.calligraphy
    compile libraries.app.crashlytics
    compile libraries.app.firebase
    compile libraries.app.firebaseAuth
    compile libraries.app.firebaseConfig
    compile libraries.app.firebaseDb
    compile libraries.app.firebaseMessaging
    compile libraries.app.firebaseUiStorage
    compile libraries.app.glide
    compile libraries.app.glideOkHttp3
    compile libraries.app.googleSignIn
    compile libraries.app.jodaTimeAndroid
    compile libraries.app.nearit
    compile libraries.app.rx
    compile libraries.app.rxAndroid
    compile libraries.app.supportAppCompat
    compile libraries.app.supportDesign
    compile libraries.app.timber
    compile libraries.app.tweetUi
    compile libraries.app.viewPagerAdapter
    compile libraries.app.kotlin

    kapt libraries.app.autoValue
    provided libraries.app.autoValue

    kapt libraries.app.daggerCompiler
    compile libraries.app.dagger

    retrolambdaConfig libraries.app.retrolambda

    testCompile libraries.test.fest
    testCompile libraries.test.jodaTime
    testCompile libraries.test.jUnit4
    testCompile libraries.test.mockito
}

apply plugin: 'com.google.gms.google-services'
